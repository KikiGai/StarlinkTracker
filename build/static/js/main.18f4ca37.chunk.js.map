{"version":3,"sources":["assets/images/starlink_logo.svg","assets/images/satellite.svg","components/Header.js","components/SatSetting.js","components/SatelliteList.js","components/WorldMap.js","constants.js","components/Main.js","components/Footer.js","components/App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","className","src","spacex_logo","alt","Component","SatSetting","showSatellite","values","console","log","props","onShow","name","labelCol","flex","labelAlign","labelWrap","wrapperCol","colon","onFinish","this","Item","label","rules","required","message","min","max","style","width","placeholder","type","htmlType","textAlign","SatelliteList","onChange","e","target","dataInfo","checked","selected","state","list","addOrRemove","setState","item","status","found","some","entry","satid","filter","onShowSatMap","onShowMap","satList","satInfo","above","isLoad","disabled","length","onClick","tip","size","itemLayout","dataSource","renderItem","actions","Meta","avatar","satellite","title","satname","description","launchDate","WorldMap","track","data","hasOwnProperty","Error","len","positions","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","height","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","prevProps","prevState","snapshot","satData","observerData","latitude","longitude","elevation","endTime","duration","urls","url","Promise","all","arr","ref","Main","showMap","preState","showNearbySatellite","setting","isLoadingList","fetchSatellite","altitude","response","error","span","Footer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.18f4ca37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starlink_logo.b9d88695.svg\";","module.exports = __webpack_public_path__ + \"static/media/satellite.141ccf71.svg\";","import React, {Component} from 'react';\nimport spacex_logo  from '../assets/images/starlink_logo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={spacex_logo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"title\">\n                    StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\nexport default Header;\n","\nimport React, {Component} from 'react';\nimport {Form, Button, InputNumber} from 'antd';\n\nclass SatSetting extends Component {\n  showSatellite = values => {\n    console.log('Received values of form: ', values);\n    this.props.onShow(values);\n  }\n\n  render() {\n    return (\n        <Form\n            name=\"wrap\"\n            labelCol={{\n              flex: '110px',\n            }}\n            labelAlign=\"left\"\n            labelWrap\n            wrapperCol={{\n              flex: 1,\n            }}\n            colon={false}\n            className=\"sat-setting\"\n            onFinish={this.showSatellite}\n        >\n\n          <Form.Item\n              label=\"Longitude(degrees)\"\n              name=\"longitude\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your Longitude\",\n                }\n              ]}\n          >\n            <InputNumber min={-180} max={180}\n                         style={{width: \"100%\"}}\n                         placeholder=\"Please input Longitude\"\n            />\n          </Form.Item>\n\n          <Form.Item\n              label=\"Latitude(degrees)\"\n              name=\"latitude\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your Latitude\",\n                }\n              ]}\n          >\n            <InputNumber min={-90} max={90}\n                         style={{width: \"100%\"}}\n                         placeholder=\"Please input Longitude\"\n            />\n          </Form.Item>\n\n          <Form.Item\n              label=\"Elevation(meters)\"\n              name=\"elevation\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your Elevation\",\n                }\n              ]}\n          >\n            <InputNumber min={-413} max={8850}\n                         style={{width: \"100%\"}}\n                         placeholder=\"Please input Longitude\"\n            />\n          </Form.Item>\n\n          <Form.Item\n              label=\"Altitude(degrees)\"\n              name=\"altitude\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your Altitude\",\n                }\n              ]}\n          >\n            <InputNumber min={0} max={90}\n                         style={{width: \"100%\"}}\n                         placeholder=\"Please input Longitude\"\n            />\n          </Form.Item>\n\n          <Form.Item\n              label=\"Duration(secs)\"\n              name=\"duration\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your Duration\",\n                }\n              ]}\n          >\n            <InputNumber min={0} max={90}\n                         style={{width: \"100%\"}}\n                         placeholder=\"Please input Longitude\"\n            />\n          </Form.Item>\n\n          <Form.Item className=\"show-nearby\">\n            <Button type=\"primary\" htmlType=\"submit\" style={{textAlign: \"center\"}}>\n              Find Satellite\n            </Button>\n          </Form.Item>\n\n        </Form>\n    );\n  }\n}\n\nexport default SatSetting;\n\n\n\n","import React, {Component} from 'react';\nimport { List, Avatar, Button, Checkbox, Spin } from 'antd';\nimport satellite from \"../assets/images/satellite.svg\";\n\nclass SatelliteList extends Component {\n  constructor(){\n    super();\n    this.state = {\n      selected: []\n    };\n  }\n\n  onChange = e => {\n    const { dataInfo, checked } = e.target;\n    const { selected } = this.state;\n    const list = this.addOrRemove(dataInfo, checked, selected);\n    this.setState({ selected: list })\n  }\n\n  addOrRemove = (item, status, list) => {\n    const found = list.some( entry => entry.satid === item.satid);\n    if(status && !found){\n      list=[...list, item]\n    }\n\n    if(!status && found){\n      list = list.filter( entry => {\n        return entry.satid !== item.satid;\n      });\n    }\n    return list;\n  }\n\n  onShowSatMap = () =>{\n    this.props.onShowMap(this.state.selected);\n  }\n\n  render() {\n    const satList = this.props.satInfo ? this.props.satInfo.above : [];\n    const { isLoad } = this.props;\n    const { selected } = this.state;\n\n    return (\n        <div className=\"sat-list-box\">\n          <Button className=\"sat-list-btn\"\n                  type=\"primary\"\n                  disabled={ selected.length === 0}\n                  onClick={this.onShowSatMap}\n          >Track</Button>\n          <hr/>\n\n          {\n            isLoad ?\n                <div className=\"spin-box\">\n                  <Spin tip=\"Loading...\" size=\"large\" />\n                </div>\n                :\n                <List\n                    className=\"sat-list\"\n                    itemLayout=\"horizontal\"\n                    size=\"small\"\n                    dataSource={satList}\n                    renderItem={item => (\n                        <List.Item\n                            actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}\n                        >\n                          <List.Item.Meta\n                              avatar={<Avatar size={50} src={satellite} />}\n                              title={<p>{item.satname}</p>}\n                              description={`Launch Date: ${item.launchDate}`}\n                          />\n\n                        </List.Item>\n                    )}\n                />\n          }\n        </div>\n    );\n  }\n}\n\nexport default SatelliteList;\n\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios\n        .get(WORLD_MAP_URL)\n        .then(res => {\n          const { data } = res;\n          const land = feature(data, data.objects.countries).features;\n          this.generateMap(land);\n        })\n        .catch(e => {\n          console.log(\"err in fetch map data \", e.message);\n        });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n\n      this.setState({\n        isLoading: true\n      });\n\n      const urls = this.props.satData.map(sat => {\n        const { satid } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n        return axios.get(url);\n      });\n\n      Promise.all(urls)\n          .then(res => {\n            const arr = res.map(sat => sat.data);\n            this.setState({\n              isLoading: false,\n              isDrawing: true\n            });\n\n            if (!prevState.isDrawing) {\n              this.track(arr);\n            } else {\n              const oHint = document.getElementsByClassName(\"hint\")[0];\n              oHint.innerHTML =\n                  \"Please wait for these satellite animation to finish before selection new ones!\";\n            }\n          })\n          .catch(e => {\n            console.log(\"err in fetch satellite position -> \", e.message);\n          });\n    }\n  }\n\n  track = data => {\n    if (!data[0].hasOwnProperty(\"positions\")) {\n      throw new Error(\"no position data\");\n\n    }\n\n    const len = data[0].positions.length;\n    const { context2 } = this.map;\n\n    let now = new Date();\n\n    let i = 0;\n\n    let timer = setInterval(() => {\n      let ct = new Date();\n\n      let timePassed = i === 0 ? 0 : ct - now;\n      let time = new Date(now.getTime() + 60 * timePassed);\n\n      context2.clearRect(0, 0, width, height);\n\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer);\n        this.setState({ isDrawing: false });\n        const oHint = document.getElementsByClassName(\"hint\")[0];\n        oHint.innerHTML = \"\";\n        return;\n      }\n\n      data.forEach(sat => {\n        const { info, positions } = sat;\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 60;\n    }, 1000);\n  };\n\n  drawSat = (sat, pos) => {\n    const { satlongitude, satlatitude } = pos;\n\n    if (!satlongitude || !satlatitude) return;\n\n    const { satname } = sat;\n    const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n    const { projection, context2 } = this.map;\n    const xy = projection([satlongitude, satlatitude]);\n\n    context2.fillStyle = this.color(nameWithNumber);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n        <div className=\"map-box\">\n          {isLoading ? (\n              <div className=\"spinner\">\n                <Spin tip=\"Loading...\" size=\"large\" />\n              </div>\n          ) : null}\n          <canvas className=\"map\" ref={this.refMap} />\n          <canvas className=\"track\" ref={this.refTrack} />\n          <div className=\"hint\" />\n        </div>\n    );\n  }\n\n  generateMap = land => {\n    const projection = geoKavrayskiy7()\n        .scale(170)\n        .translate([width / 2, height / 2])\n        .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n        .attr(\"width\", width)\n        .attr(\"height\", height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n        .attr(\"width\", width)\n        .attr(\"height\", height);\n\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\");\n\n    let path = geoPath()\n        .projection(projection)\n        .context(context);\n\n    land.forEach(ele => {\n      context.fillStyle = \"#B3DDEF\";\n      context.strokeStyle = \"#000\";\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2\n    };\n  };\n}\n\nexport default WorldMap;\n\n\n","export const SAT_API_KEY = \"YNLUEE-E5RFYB-ND3JXT-4WZ2\";\nexport const STARLINK_CATEGORY = \"52\";\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";\nexport const BASE_URL = \"\";\n\n","import React, {Component} from 'react';\nimport { Row, Col } from 'antd';\nimport axios from 'axios';\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from '../constants';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap';\n\nclass Main extends Component {\n  constructor(){\n    super();\n    this.state = {\n      setting: {},\n      satInfo: {},\n      satList: [],\n      isLoadingList: false\n    }\n  }\n  render() {\n    const { isLoadingList, satInfo, satList, setting } = this.state;\n    return (\n        <Row className='main'>\n          <Col span={8} className=\"left-side\">\n            <SatSetting onShow={this.showNearbySatellite}/>\n            <SatelliteList isLoad={isLoadingList}\n                           satInfo={satInfo}\n                           onShowMap={this.showMap} />\n          </Col>\n          <Col span={16} className=\"right-side\">\n            <WorldMap satData={satList} observerData={setting} />\n          </Col>\n        </Row>\n    );\n  }\n\n  showMap = (selected) => {\n    this.setState(preState => ({\n      ...preState,\n      satList: [...selected]\n    }))\n  }\n\n  showNearbySatellite = (setting) => {\n    this.setState({\n      isLoadingList: true,\n      setting: setting\n    })\n    this.fetchSatellite(setting);\n  }\n\n  fetchSatellite= (setting) => {\n    const {latitude, longitude, elevation, altitude} = setting;\n    const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n    this.setState({\n      isLoadingList: true\n    });\n\n    axios.get(url)\n        .then(response => {\n          console.log(response.data)\n          this.setState({\n            satInfo: response.data,\n            isLoadingList: false\n          })\n        })\n        .catch(error => {\n          console.log('err in fetch satellite -> ', error);\n        })\n  }\n}\nexport default Main;\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2020 StarLink Tracker. All Rights Reserved. Website Made by Wenqi Gai\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\n const root = ReactDOM.createRoot(document.getElementById('root'));\n root.render(<App />);\n//ReactDOM.render(\n //   <App />,\n //   document.getElementById(\"root\")\n//)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nreportWebVitals();\n"],"sourceRoot":""}